#+TITLE: Luca's nix configuration
#+STARTUP: content
#+HTML_HEAD: <script>var clicky_site_ids = clicky_site_ids || []; clicky_site_ids.push(101260027);</script>
#+HTML_HEAD: <script async src="//static.getclicky.com/js"></script>
#+STARTUP: content

* Introduction
** This repository
This repository contains my system configuration.
The main objective is to have a portable and reproducible system in order to for example bootstrap a new system in a quick and automated way.
The ideal is to share packages and configuration across different operating systems.
At the moment I only use a ~macOS~ system but I am prepared for the day I will switch to ~nixOS~

Tools:
- ~nix~ as a package manager
  + In particular, an experimental feature called ~flake~ to achieve complete reproducibility
- ~home-manager~ to configure packages and dotfiles
- ~nix-darwin~ to configure macOS systems (e.g. it has a great ~brew~ module)

** This file
This file (~readme.org~) is used to generate (the correct term is ~tangle~) my ~flake.nix~ file, where I specify the inputs and outputs of my system configuration.
The tangled ~flake.nix~ file imports other ~.nix~ files (e.g. ~darwin/default.nix~).

This file is better viewed in HTML format [[https://luca.cambiaghi.me/nixpkgs/readme.html][here]] or through ~org-mode~ (clone the repo and open in ~emacs~).
You can visit my blog at the same [[https://luca.cambiaghi.me][website]].

* flake.nix
** file structure
#+begin_src nix :tangle flake.nix :noweb tangle
# NOTE: this file is tangled from readme.org
# DO NOT edit by hand
{
  description = "Luca Cambiaghi's darwin configuration";
  <<inputs>>
  outputs = inputs@{ self, nixpkgs, darwin, home-manager, flake-utils, ... }:
    let
      <<nixpkgs-config>>
      <<home-manager-config>>
      <<nix-darwin-config>>
    in {
      darwinConfigurations = {
        <<luca-macbookpro>>
        <<github-ci>>
      };
      <<cloud-vm>>
      <<home-manager-modules>>
    } //
    <<dev-shell>>
}
#+end_src

** inputs
#+NAME: inputs
#+begin_src nix
inputs = {
  # Package sets
  nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
  nixpkgs-master.url = "github:nixos/nixpkgs/master";
  nixpkgs-stable-darwin.url = "github:nixos/nixpkgs/nixpkgs-20.09-darwin";
  nixos-stable.url = "github:nixos/nixpkgs/nixos-20.09";

  # Environment/system management
  darwin.url = "github:lnl7/nix-darwin";
  darwin.inputs.nixpkgs.follows = "nixpkgs";
  home-manager.url = "github:nix-community/home-manager";
  home-manager.inputs.nixpkgs.follows = "nixpkgs";

  # Other sources
  emacs.url = "github:nix-community/emacs-overlay";
  fish-done = { url = "github:franciscolourenco/done"; flake = false; };
  flake-compat = { url = "github:edolstra/flake-compat"; flake = false; };
  flake-utils.url = "github:numtide/flake-utils";
};
#+end_src

** nixpkgs config
The trick in the ~overlays~ variable allows us to use the stable version of problematic
packages. You can just use ~stable.pkg~ instead of ~pkg~ in ~home/default.nix~

#+NAME: nixpkgs-config
#+begin_src nix
nixpkgsConfig = with inputs; {
  config = {
    allowUnfree = true;
    allowUnsupportedSystem = true;
  };
  overlays = [
    (
      final: prev:
      let
        system = prev.stdenv.system;
        nixpkgs-stable = if system == "x86_64-darwin" then nixpkgs-stable-darwin else nixos-stable;
      in {
        master = nixpkgs-master.legacyPackages.${system};
        stable = nixpkgs-stable.legacyPackages.${system};
      }
    )
    emacs.overlay
  ];
};
#+end_src

** home-manager config
#+NAME: home-manager-config
#+begin_src nix
homeManagerCommonConfig = with self.homeManagerModules; {
  imports = [
    ./home
    # configs.git.aliases
    # configs.starship.symbols
    # programs.kitty.extras
  ];
};
#+end_src

** nix-darwin config
#+NAME: nix-darwin-config
#+begin_src nix
nixDarwinCommonModules = { user }: [
  # Main `nix-darwin` config
  ./darwin
  # `home-manager` module
  home-manager.darwinModules.home-manager
  {
    nixpkgs = nixpkgsConfig;
    # Hack to support legacy worklows that use `<nixpkgs>` etc.
    # nix.nixPath = { nixpkgs = "$HOME/.config/nixpkgs/nixpkgs.nix"; };
    # `home-manager` config
    users.users.${user}.home = "/Users/${user}";
    home-manager.useGlobalPkgs = true;
    home-manager.users.${user} = homeManagerCommonConfig;
  }
];
#+end_src

** luca-macbook-pro
#+NAME: luca-macbookpro
#+begin_src nix
luca-macbookpro = darwin.lib.darwinSystem {
  modules = nixDarwinCommonModules { user = "luca"; } ++ [
    {
      networking = {
        knownNetworkServices = ["Wi-Fi" "Bluetooth PAN" "Thunderbolt Bridge"];
        hostName =  "luca-macbookpro";
        computerName = "luca-macbookpro";
        localHostName = "luca-macbookpro";
      };
    }
  ];
  specialArgs = { inherit inputs nixpkgs; };
};
#+end_src

** github-ci
#+NAME: github-ci
#+begin_src nix
githubCI = darwin.lib.darwinSystem {
  modules = nixDarwinCommonModules { user = "runner"; } ++ [
    ({ lib, ... }: { homebrew.enable = lib.mkForce false; })
  ];
};
#+end_src

** home-manager-modules
#+NAME: home-manager-modules
#+begin_src nix
# homeManagerModules = {
#   configs.git.aliases = import ./home/configs/git-aliases.nix;
#   configs.gh.aliases = import ./home/configs/gh-aliases.nix;
#   configs.starship.symbols = import ./home/configs/starship-symbols.nix;
#   programs.neovim.extras = import ./home/modules/programs/neovim/extras.nix;
#   programs.kitty.extras = import ./home/modules/programs/kitty/extras.nix;
# };
#+end_src

** cloud-vm
Build and activate with ~nix build .#cloudVM.activationPackage; ./result/activate~
#+NAME: cloud-vm
#+begin_src nix
cloudVM = home-manager.lib.homeManagerConfiguration {
  system = "x86_64-linux";
  homeDirectory = "/home/luca";
  username = "luca";
  configuration = {
    imports = [ homeManagerCommonConfig ];
    nixpkgs = nixpkgsConfig;
  };
};
#+end_src

** dev-shell
#+NAME: dev-shell
#+begin_src nix
inputs.flake-utils.lib.eachDefaultSystem (system:
  let
    pkgs = nixpkgs.legacyPackages.${system};
  in {
    devShell = import ./shell.nix { inherit pkgs; };
  });
#+end_src

* Practical commands
** Install nix (flakes)
thanks https://github.com/kclejeune/system
#+begin_src sh
# 1.
if [[ $(uname -s) == 'Darwin' ]]; then
    # sh <(curl -L https://nixos.org/nix/install) --daemon --darwin-use-unencrypted-nix-store-volume
    sh <(curl -L https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20210126_f15f0b8/install) --daemon --darwin-use-unencrypted-nix-store-volume
else
    sh <(curl -L https://nixos.org/nix/install) --daemon
fi

# 2.
git clone git@github.com:lccambiaghi/nixpkgs.git ~/git/nixpkgs

# 3.
cd ~/git/nixpkgs && nix build ".#darwinConfigurations.luca-macbookpro.system" && ./result/sw/bin/darwin-rebuild switch --flake .#luca-macbookpro
#+end_src

** darwin-rebuild
#+begin_src sh
darwin-rebuild build --flake .#luca-macbookpro
# nix build ".#darwinConfigurations.luca-macbookpro.system"
darwin-rebuild switch --flake .#luca-macbookpro
# ./result/sw/bin/darwin-rebuild switch --flake .#luca-macbookpro
#+end_src

** nix flake update
#+begin_src sh
nix flake update --update-input nixpkgs
#+end_src

* Nix
- Good intro: https://stephank.nl/p/2020-06-01-a-nix-primer-by-a-newcomer.html

** Fundamentals
Set:
#+begin_src nix
{ "a b" = "c"; count = 2; }
#+end_src

List:
#+begin_src nix
[42 "a b" (3 + 6) [2 3 4] {x = 2;}]
#+end_src

Lambda:
#+begin_src nix
(x: x + x) 21
# 42

let hi = {name, place}: "Hi ${name} in ${place}!";
in hi { name = "Michael"; place = "Austria";  }
#+end_src

Parameter with default value:
#+begin_src nix
{ pkgs ? import <nixpkgs> {} }:
#+end_src

~<nixpkgs>~ refers to the value of the nixpkgs attribute declared in the NIX_PATH environment variable

** Config
A config takes an attribute as parameter and returns an attribute set
#+begin_src nix
{ pkgs }:

{
  packageOverrides = pkgs: {
    emacs = pkgs.emacs.override {
      withGTK2 = false;
      withGTK3 = false;
      withXwidgets = false;
    };
  };

  allowUnfree = true;
}
#+end_src

** Derivation
A derivation takes inputs and produces output.
A derivation is lazy, so it will only be evaluated when it is input to other derivations.

#+begin_src nix
derivation {
  name = "hello-world";
  system = "x86_64-linux";
  outputs = [ "out" ];  # This is the default, and can be omitted.
  builder = "${pkgs.bash}/bin/bash";
  args = [ "-c" "echo 'Hello world!' > $out" ];
}
#+end_src

Derviation outputs are stored in the nix store.
Each derivation's output is defined by an hash which encodes all input derivations.
If something changes even slightly in the inputs, the hash output will change.
** Escaping in strings
- You can use ~'~ to escape double quotes
- You can use ~''~ to escape dollar
* References
- https://github.com/malob/nixpkgs
- https://github.com/kclejeune/system
* COMMENT missing
** TODO R and packages
** TODO gnupg
* COMMENT Local variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# company-backends: (company-dabbrev-code company-files company-keywords)
# End:
